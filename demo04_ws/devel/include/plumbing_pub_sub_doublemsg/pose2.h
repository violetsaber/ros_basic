// Generated by gencpp from file plumbing_pub_sub_doublemsg/pose2.msg
// DO NOT EDIT!


#ifndef PLUMBING_PUB_SUB_DOUBLEMSG_MESSAGE_POSE2_H
#define PLUMBING_PUB_SUB_DOUBLEMSG_MESSAGE_POSE2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <plumbing_pub_sub_doublemsg/pose1.h>
#include <plumbing_pub_sub_doublemsg/pose1.h>

namespace plumbing_pub_sub_doublemsg
{
template <class ContainerAllocator>
struct pose2_
{
  typedef pose2_<ContainerAllocator> Type;

  pose2_()
    : vel()
    , ang()  {
    }
  pose2_(const ContainerAllocator& _alloc)
    : vel(_alloc)
    , ang(_alloc)  {
  (void)_alloc;
    }



   typedef  ::plumbing_pub_sub_doublemsg::pose1_<ContainerAllocator>  _vel_type;
  _vel_type vel;

   typedef  ::plumbing_pub_sub_doublemsg::pose1_<ContainerAllocator>  _ang_type;
  _ang_type ang;





  typedef boost::shared_ptr< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> const> ConstPtr;

}; // struct pose2_

typedef ::plumbing_pub_sub_doublemsg::pose2_<std::allocator<void> > pose2;

typedef boost::shared_ptr< ::plumbing_pub_sub_doublemsg::pose2 > pose2Ptr;
typedef boost::shared_ptr< ::plumbing_pub_sub_doublemsg::pose2 const> pose2ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator1> & lhs, const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator2> & rhs)
{
  return lhs.vel == rhs.vel &&
    lhs.ang == rhs.ang;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator1> & lhs, const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plumbing_pub_sub_doublemsg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b494f3bb942b17882f6ddc15759053f";
  }

  static const char* value(const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b494f3bb942b178ULL;
  static const uint64_t static_value2 = 0x82f6ddc15759053fULL;
};

template<class ContainerAllocator>
struct DataType< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plumbing_pub_sub_doublemsg/pose2";
  }

  static const char* value(const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pose1 vel\n"
"pose1 ang\n"
"================================================================================\n"
"MSG: plumbing_pub_sub_doublemsg/pose1\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vel);
      stream.next(m.ang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plumbing_pub_sub_doublemsg::pose2_<ContainerAllocator>& v)
  {
    s << indent << "vel: ";
    s << std::endl;
    Printer< ::plumbing_pub_sub_doublemsg::pose1_<ContainerAllocator> >::stream(s, indent + "  ", v.vel);
    s << indent << "ang: ";
    s << std::endl;
    Printer< ::plumbing_pub_sub_doublemsg::pose1_<ContainerAllocator> >::stream(s, indent + "  ", v.ang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLUMBING_PUB_SUB_DOUBLEMSG_MESSAGE_POSE2_H
